dat <- occ(query=species2, from='bison', bisonopts=list(count=occurrs))
dat <- occ2df(dat)
#     dat <- occtodfspp(dat, 'data')
apply(dat, 1, as.list)
} else
{
dat <- occ(query=species2, from='inat', inatopts=list(maxresults=occurrs))
dat <- occ2df(dat)
#     dat <- occtodfspp(dat, 'data')
dat <- dat[as.character(dat$name) %in% species2, ]
apply(dat, 1, as.list)
}
}
get_colors <- function(vec, palette_name){
num_colours <- length(unique(vec))
brewer.pal(max(num_colours, 3), palette_name)
}
rcharts_prep2 <- function(out, palette_name, popup = FALSE){
require(rgbif)
# colors
uniq_name_vec <- unique(vapply(out, function(x) x[["name"]], ""))
# colors
mycolors <- get_colors(uniq_name_vec, palette_name)
if(length(mycolors) > length(uniq_name_vec))
mycolors <- mycolors[1:length(uniq_name_vec)]
mycolors_df <- data.frame(taxon=uniq_name_vec, color=mycolors)
# Add fill color for points
out_list2 <- lapply(out, function(x){
x$fillColor = mycolors_df[as.character(mycolors_df$taxon) %in% x$name, "color"]
x
})
# popup
if(popup)
out_list2 <- lapply(out_list2, function(l){
l$popup = paste(paste("<b>", names(l), ": </b>", l, "<br/>"), collapse = '\n')
return(l)
})
out_list2 <- Filter(function(x) !is.na(x$latitude), out_list2)
toGeoJSON(out_list2, lat = 'latitude', lon = 'longitude')
}
toGeoJSON <- function(list_, lat = 'latitude', lon = 'longitude'){
x = lapply(list_, function(l){
if (is.null(l[[lat]]) || is.null(l[[lon]])){
return(NULL)
}
list(
type = 'Feature',
geometry = list(
type = 'Point',
coordinates = as.numeric(c(l[[lon]], l[[lat]]))
),
properties = l[!(names(l) %in% c(lat, lon))]
)
})
setNames(Filter(function(x) !is.null(x), x), NULL)
}
gbifmap2 <- function(input_data, map_provider = 'MapQuestOpen.OSM', map_zoom = 2, height = 600, width = 870){
require(rCharts)
L1 <- Leaflet$new()
L1$tileLayer(provider = map_provider, urlTemplate = NULL)
L1$set(height = height, width = width)
L1$setView(c(30, -73.90), map_zoom)
L1$geoJson(input_data,
onEachFeature = '#! function(feature, layer){
layer.bindPopup(feature.properties.popup || feature.properties.taxonName)
} !#',
pointToLayer =  "#! function(feature, latlng){
return L.circleMarker(latlng, {
radius: 4,
fillColor: feature.properties.fillColor || 'red',
color: '#000',
weight: 1,
fillOpacity: 0.8
})
} !#"
)
L1$fullScreen(TRUE)
return(L1)
}
get_palette <- function(userselect){
colours_ <- data.frame(
actual=c("Blues","BuGn","BuPu","GnBu","Greens","Greys","Oranges","OrRd","PuBu",
"PuBuGn","PuRd","Purples","RdPu","Reds","YlGn","YlGnBu","YlOrBr","YlOrRd",
"BrBG","PiYG","PRGn","PuOr","RdBu","RdGy","RdYlBu","RdYlGn","Spectral"),
choices=c("Blues","BlueGreen","BluePurple","GreenBlue","Greens","Greys","Oranges","OrangeRed",
"PurpleBlue","PurpleBlueGreen","PurpleRed","Purples",
"RedPurple","Reds","YellowGreen","YellowGreenBlue","YellowOrangeBrown","YellowOrangeRed",
"BrownToGreen","PinkToGreen","PurpleToGreen","PurpleToOrange","RedToBlue","RedToGrey",
"RedYellowBlue","RedYellowGreen","Spectral"))
as.character(colours_[colours_$choices %in% userselect, "actual"])
}
rcharts_prep1(sppchar = input$spec, occurrs = input$numocc, datasource = input$datasource)
rcharts_prep1(sppchar = species2, occurrs = input$numocc, datasource = )
rcharts_prep1(sppchar = species2, occurrs = 20, datasource = 'GBIF')
library(roxygen2); library(testthat)
plotly <- "~/github/ropensci/plotly/"
install(plotly)
library(plotly)
?plotly
plotlykey = "35sskrtusv"
plotlyuser = "sckott"
username = "sckott"
api_key = "35sskrtusv"
py <- plotly(username, api_key)
py
x <- c(0,1,2)
# y <- c(10,11,12)
plotly
plotly::plotly
?plotly
p <- plotly(username="sckott", key="35sskrtusv")
z <- matrix(c(10,20,30,20,1,60,30,60,1), nrow=3, ncol=3)
data <- list(
z = z,
type = 'heatmap')
data
response <- p$plotly(data)
url <- response$url
url
filename <- response$filename
filename
browseURL(url)
species2
numocc=20
dat <- occ(query=species2, from='gbif', gbifopts=list(georeferenced=TRUE, limit=numocc))
dat
dat <- occ2df(dat)
dat
fixnames(dat)
dat <- occ2df(dat)
fixnames(dat)
dat <- occ(query=species2, from='gbif', gbifopts=list(georeferenced=TRUE, limit=numocc))
df <- fixnames(dat)
df
df <- occ2df(df)
df
library(rCharts)
renderMap
map_provider = "osm"
mapleaflet(data = df, map_provider = map_provider)
?shiny
setwd("../")
setwd("shiny/")
dir()
library(shiny)
runApp(".")
leafletr_prep <- function(data, popup = TRUE, map_provider = "osm", zoom = 3, title = "map",
size, centerview = c(30, -73.9), dest = ".", overwrite = TRUE, incl.data = TRUE)
{
dest <- ifelse(is.null(dest), tempdir(), dest)
dat <- toGeoJSON(data = data, dest = dest, lat.lon = c("latitude", "longitude"))
leaflet(dat, title = title, size = size, base.map = map_provider, center = centerview,
zoom = zoom, popup = popup, overwrite = overwrite, incl.data = incl.data)
}
load_defaults(leafletr_prep)
overwrite
species2
df
data=df
dest <- ifelse(is.null(dest), tempdir(), dest)
dest
dat <- toGeoJSON(data = data, dest = dest, lat.lon = c("latitude", "longitude"))
toGeoJSON
leafletR::toGeoJSON
dat <- leafletR::toGeoJSON(data = data, dest = dest, lat.lon = c("latitude", "longitude"))
leaflet
dat
leaflet(dat, title = title, size = size, base.map = map_provider, center = centerview,
zoom = zoom, popup = popup, overwrite = overwrite, incl.data = incl.data)
?leafletR
renderMap
?renderMap
leaflet
?leaflet
cat("map/map.html")
readLines("map/map.html")
leaflet
renderMap
runApp(".")
mapgist
setwd("../")
setwd("vign/")
dir()
library(knitr)
knit("spocc_guide.Rmd")
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
document(spocc)
install(spocc)
library(spocc)
occ(query = 'Accipiter striatus', from = 'gbif')
occ(query = 'Accipiter striatus', from = 'ecoengine')
occ(query = 'Danaus plexippus', from = 'inat')
occ(query = 'Bison bison', from = 'bison')
(by_species <- occ(query = "acanthognathus brevicornis", from = "antweb"))
library(roxygen2); library(testthat); library(devtools)
AntWeb <- "~/AntWeb/"
AntWeb <- "~/github/ropensci/AntWeb/"
install(AntWeb)
library(spocc)
(by_species <- occ(query = "acanthognathus brevicornis", from = "antweb"))
(by_genus <- occ(query = "acanthognathus", from = "antweb"))
by_genus
by_genus$antweb
head(by_genus$antweb)
head(by_genus$antweb$data)
head(by_genus$antweb$data$acanthognathus)
occ(query = 'Setophaga caerulescens', from = 'ebird', ebirdopts = list(region='US'))
occ(query = 'Spinus tristis', from = 'ebird', ebirdopts =
list(method = 'ebirdgeo', lat = 42, lng = -76, dist = 50))
out <- occ(query = 'Pinus contorta', from=c('gbif','inat'))
out$gbif
out$gbif$data
occ2df(out)
occ(query='Pinus contorta', from=c('gbif','inat'), limit=10)
occ(query='Accipiter striatus', from='gbif',
geometry='POLYGON((30.1 10.1, 10 20, 20 60, 60 60, 30.1 10.1))')
occ(query='Helianthus annuus', from='bison',
geometry='POLYGON((-111.06 38.84, -110.80 39.37, -110.20 39.17, -110.20 38.90,
-110.63 38.67, -111.06 38.84))')
occ(query='Accipiter striatus', from='gbif', geometry=c(-125.0,38.4,-121.8,40.9))
occ(query='Accipiter striatus', from='ecoengine', limit=10,
geometry=c(-125.0,38.4,-121.8,40.9))
bounds <- c(-125.0,38.4,-121.8,40.9)
occ(query = 'Danaus plexippus', from="inat", geometry=bounds)
occ(query = 'Danaus plexippus', from=c("inat","gbif","ecoengine"), geometry=bounds)
ebirdopts = list(region = 'US'); gbifopts  =  list(country = 'US')
out <- occ(query = 'Setophaga caerulescens', from = c('gbif','inat','bison','ebird'),
gbifopts = gbifopts, ebirdopts = ebirdopts)
occ2df(out)
spnames <- c('Accipiter striatus', 'Setophaga caerulescens', 'Spinus tristis')
out <- occ(query = spnames, from = 'gbif', gbifopts = list(georeferenced = TRUE))
df <- occ2df(out)
head(df)
ids <- get_ids(names=c("Chironomus riparius","Pinus contorta"), db = c('itis','gbif'))
library(taxize)
ids <- get_ids(names=c("Chironomus riparius","Pinus contorta"), db = c('itis','gbif'))
ids
occ(ids = ids[[1]], from='bison')
occ(ids = ids, from='gbif')
ids <- get_ids(names="Chironomus riparius", db = 'gbif')
occ(ids = ids, from='gbif')
ids <- get_gbifid("Chironomus riparius")
ids
(ids <- get_tsn('Accipiter striatus'))
occ(ids = ids, from='bison')
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
check(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
document(spocc)
install(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
# document(spocc)
# install(spocc)
library(spocc)
occ_options()
occ_options()
library(rgbif)
occ_options()
occ_options('ecoengine')
occ_options <- function(from = 'gbif'){
switch(from,
gbif = help('occ_search', package = "rgbif"),
bison = help('bison', package = "rbison"),
inat = help('get_inat_obs', package = "rinat"),
ebird = help('ebirdregion', package = "rebird"),
ecoengine = help('ee_observations', package = "ecoengine"))
antweb = help('aw_data', package = "AntWeb")
}
occ_options('ecoengine')
occ_options('ecoengine')
help('occ_search', package = "rgbif")
from = 'gbif'
switch(from,
gbif = help('occ_search', package = "rgbif"),
bison = help('bison', package = "rbison"),
inat = help('get_inat_obs', package = "rinat"),
ebird = help('ebirdregion', package = "rebird"),
ecoengine = help('ee_observations', package = "ecoengine"))
antweb = help('aw_data', package = "AntWeb")
from='ecoengine'
switch(from,
gbif = help('occ_search', package = "rgbif"),
bison = help('bison', package = "rbison"),
inat = help('get_inat_obs', package = "rinat"),
ebird = help('ebirdregion', package = "rebird"),
ecoengine = help('ee_observations', package = "ecoengine"))
antweb = help('aw_data', package = "AntWeb")
?AntWeb::aw_data
source('~/github/ropensci/spocc/R/occ_options.r')
occ_options('ecoengine')
occ_options('rgbif')
source('~/github/ropensci/spocc/R/occ_options.r')
occ_options('rgbif')
switch(from,
gbif = "?rgbif::occ_search"),
bison = "rbison::bison",
inat = "rinat::get_inat_obs",
ebird = "rebird::ebirdregion",
ecoengine = "ecoengine::ee_observations",
antweb = "AntWeb::aw_data")
switch(from,
gbif = "?rgbif::occ_search",
bison = "rbison::bison",
inat = "rinat::get_inat_obs",
ebird = "rebird::ebirdregion",
ecoengine = "ecoengine::ee_observations",
antweb = "AntWeb::aw_data")
showit <- switch(from,
gbif = "?rgbif::occ_search",
bison = "rbison::bison",
inat = "rinat::get_inat_obs",
ebird = "rebird::ebirdregion",
ecoengine = "ecoengine::ee_observations",
antweb = "AntWeb::aw_data")
showit
showit <- switch(from,
gbif = "?rgbif::occ_search",
bison = "?rbison::bison",
inat = "?rinat::get_inat_obs",
ebird = "?rebird::ebirdregion",
ecoengine = "?ecoengine::ee_observations",
antweb = "?AntWeb::aw_data")
showit
eval(showit)
parse(text = showit)
eval(parse(text = showit))
occ_options <- function(from = 'gbif'){
#    showit <-
#     switch(from,
#          gbif = help('occ_search', package = "rgbif"),
#          bison = help('bison', package = "rbison"),
#          inat = help('get_inat_obs', package = "rinat"),
#          ebird = help('ebirdregion', package = "rebird"),
#          ecoengine = help('ee_observations', package = "ecoengine"),
#          antweb = help('aw_data', package = "AntWeb"))
showit <- switch(from,
gbif = "?rgbif::occ_search",
bison = "?rbison::bison",
inat = "?rinat::get_inat_obs",
ebird = "?rebird::ebirdregion",
ecoengine = "?ecoengine::ee_observations",
antweb = "?AntWeb::aw_data")
eval(parse(text = showit))
}
occ_options('ecoengine')
occ_options()
occ_options()
occ_options('ecoengine')
occ_options('AntWeb')
occ_options('AntWeb')
source('~/.active-rstudio-document')
occ_options()
occ_options('ecoengine')
occ_options('AntWeb')
source('~/github/ropensci/spocc/R/occ_options.r')
occ_options('AntWeb')
library(sp) # for the spplot function below
out <- occ(query = "Populus tremuloides", from = c("inat","gbif"))
out <- fixnames(out, "query")
out
sp_points <- occ_to_sp(out)
sp_points
spplot(sp_points)
spplot(sp_points)
spplot(sp_points[,-3])
sp_points[,-3]
sp_points
spplot(sp_points[,-2])
?spplot
data(meuse.grid)
gridded(meuse.grid)=~x+y
meuse.grid$g = factor(sample(letters[1:5], 3103, replace=TRUE),levels=letters[1:10])
meuse.grid$f = factor(sample(letters[6:10], 3103, replace=TRUE),levels=letters[1:10])
spplot(meuse.grid, c("f","g"))
meuse.grid$g
spplot(sp_points, "prov")
library(maptools)
data(wrld_simpl)
plot(wrld_simpl[wrld_simpl$NAME == "United States", ],xlim=c(-70,-60))
out <- occ(query = "Accipiter striatus", from = c("inat","gbif"))
sp_points <- occ_to_sp(out,just_coords=TRUE)
points(sp_points,col=2)
spp <- c('Danaus plexippus','Accipiter striatus','Pinus contorta')
dat <- occ(query = spp, from = 'gbif', gbifopts = list(georeferenced=TRUE))
data <- occ2df(dat)
mapleaflet(data = data, dest = ".")
spp <- c('Danaus plexippus','Accipiter striatus','Pinus contorta','Puma concolor',
'Ursus americanus','Gymnogyps californianus')
dat <- occ(query = spp, from = 'gbif', gbifopts = list(georeferenced = TRUE))
data <- occ2df(dat)
mapleaflet(data, map_provider = 'cm')
ecoengine_data <- occ(query = 'Lynx rufus californicus', from = 'ecoengine')
mapggplot(ecoengine_data)
gbif_data <- occ(query = 'Accipiter striatus', from = 'gbif')
mapggplot(gbif_data)
bison_data <- occ(query = 'Accipiter striatus', from = 'bison', bisonopts=list(count=100))
mapggplot(bison_data)
spp <- c('Danaus plexippus','Accipiter striatus','Pinus contorta')
dat <- occ(spp, from='gbif', gbifopts=list(georeferenced=TRUE))
dat <- fixnames(dat)
df <- occ2df(dat)
head(df)
mapgist(data=df, symbol=c('park','zoo','garden'))
mapgist(data=df, color=c('#976AAE','#6B944D','#BD5945'), size=c('small','medium','large'))
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
document(spocc)
install(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
# document(spocc)
# install(spocc)
library(spocc)
check(spocc)
build_win(spocc)
build_win(spocc, version="R-devel")
build(spocc)
R.version.string
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
document(spocc)
install(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
# document(spocc)
# install(spocc)
library(spocc)
# check(spocc)
# build(spocc)
# test_package("spocc")
# vignette
# setwd("~/github/ropensci/spocc/inst/vign/")
# library(knitr)
# knit("spocc_guide.Rmd")
build_win(spocc)
build(spocc)
library(spocc)
?occ
library(knitr)
dir()
knit("spocc_vignette.Rmd")
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
document(spocc)
install(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
# document(spocc)
# install(spocc)
library(spocc)
check(spocc)
?oc
?occ
?occ
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
# document(spocc)
# install(spocc)
library(spocc)
?occ
build_win(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
document(spocc)
install(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
# document(spocc)
# install(spocc)
library(spocc)
# check(spocc)
# build(spocc)
# test_package("spocc")
### vignette
# setwd("~/github/ropensci/spocc/inst/vign/")
# library(knitr)
# knit("spocc_vignette.Rmd")
build_win(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
document(spocc)
install(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
# document(spocc)
# install(spocc)
library(spocc)
build(spocc)
spocc
build_win(spocc)
R.version.string
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
document(spocc)
install(spocc)
library(testthat); library(devtools); library(roxygen2)
spocc <- "~/github/ropensci/spocc"
# document(spocc)
# install(spocc)
library(spocc)
# check(spocc)
# build(spocc)
# test_package("spocc")
### vignette
# setwd("~/github/ropensci/spocc/inst/vign/")
# library(knitr)
# knit("spocc_vignette.Rmd")
build_win(spocc)
